
service cloud.firestore {
  match /databases/{database}/documents {

    function isTimestamp(value) {
      return value is timestamp;
    }

    function isAdmin(userId) {
      // Ensures the user document exists and the role is 'admin'.
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc.exists && userDoc.data.role == 'admin';
    }

    match /users/{userId} {
      allow read: if request.auth != null &&
                    (
                      (request.auth.uid == userId) || // User can read their own profile
                      isAdmin(request.auth.uid)      // Admin can read any profile
                    );

      // For listing users (e.g., admin viewing all drivers)
      allow list: if isAdmin(request.auth.uid);

      allow create: if request.auth != null &&
                      (
                        // Case 1: User creating their own profile (Not primary flow for this app)
                        (request.auth.uid == userId &&
                         request.resource.data.uid == userId && 
                         request.resource.data.email is string && request.resource.data.email.size() > 0 &&
                         request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                         request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                         request.resource.data.role == 'driver' && 
                         request.resource.data.employeeType is string && request.resource.data.employeeType.size() > 0 &&
                         isTimestamp(request.resource.data.createdAt) && request.resource.data.createdAt == request.time 
                        ) ||
                        // Case 2: Admin creating a driver profile
                        (isAdmin(request.auth.uid) &&
                         request.resource.data.role == 'driver' && 
                         request.resource.data.uid == userId && 
                         request.resource.data.email is string && request.resource.data.email.size() > 0 &&
                         request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                         request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                         request.resource.data.employeeType is string && request.resource.data.employeeType.size() > 0
                         // createdAt is set by serverTimestamp() from client, no direct rule check needed here for admin create
                        )
                      );

      allow update: if request.auth != null &&
                    (
                      // Case 1: User updating their own profile (firstName, lastName)
                      (request.auth.uid == userId &&
                       // User cannot change their own role, email, uid, employeeType, or createdAt.
                       request.resource.data.role == resource.data.role &&
                       request.resource.data.email == resource.data.email &&
                       request.resource.data.uid == resource.data.uid &&
                       request.resource.data.employeeType == resource.data.employeeType &&
                       request.resource.data.createdAt == resource.data.createdAt
                       // No explicit checks on firstName/lastName means they can be changed by user if other conditions are met.
                      ) ||
                      // Case 2: Admin updating a user's profile (firstName, lastName, employeeType)
                      (isAdmin(request.auth.uid) &&
                       request.resource.data.uid == userId && // Ensure admin is updating the correct user doc
                       // Admin cannot change role, email, uid directly here.
                       request.resource.data.role == resource.data.role &&
                       request.resource.data.email == resource.data.email &&
                       request.resource.data.uid == resource.data.uid &&
                       // Corrected createdAt handling for admin update:
                       // Allows setting createdAt if it wasn't a valid timestamp before (e.g. null or missing),
                       // but prevents changing it if it was already a valid timestamp.
                       (
                         ( // Condition for prior createdAt not being a valid timestamp
                           !resource.prior.data.containsKey('createdAt') ||
                           !(resource.prior.data.createdAt is timestamp)
                         ) ||
                         ( // Condition for prior createdAt being a valid timestamp (must not change)
                           resource.prior.data.createdAt is timestamp &&
                           request.resource.data.createdAt == resource.prior.data.createdAt
                         )
                       )
                       // Admin can change firstName, lastName, employeeType.
                      )
                    );
      allow delete: if isAdmin(request.auth.uid); // Only admins can delete user profiles
    }

    // Rules for Taxis
    match /taxis/{taxiId} {
      allow list: if request.auth != null;
      allow read: if request.auth != null &&
                    ( isAdmin(request.auth.uid) || resource.data.isActive == true );
      allow create, update, delete: if isAdmin(request.auth.uid);
    }

    // Rules for Shifts
    match /shifts/{shiftId} {
      allow read, list: if request.auth != null &&
                       (
                         request.auth.uid == resource.data.driverId || // Driver can read/list their own shifts
                         isAdmin(request.auth.uid)                   // Admin can read/list any shifts
                       );
      allow create: if request.auth != null &&
                      (
                        // Driver creating their own shift
                        (request.auth.uid == request.resource.data.driverId &&
                          request.resource.data.taxiId is string &&
                          request.resource.data.taxiLicensePlate is string &&
                          request.resource.data.driverFirstName is string &&
                          request.resource.data.driverLastName is string &&
                          isTimestamp(request.resource.data.startTime) &&
                          isTimestamp(request.resource.data.endTime) &&
                          isTimestamp(request.resource.data.createdAt) && request.resource.data.createdAt == request.time
                        ) ||
                        // Admin creating a shift for any driver
                        (isAdmin(request.auth.uid) &&
                          request.resource.data.driverId is string && 
                          request.resource.data.taxiId is string &&
                          request.resource.data.taxiLicensePlate is string &&
                          request.resource.data.driverFirstName is string &&
                          request.resource.data.driverLastName is string &&
                          isTimestamp(request.resource.data.startTime) &&
                          isTimestamp(request.resource.data.endTime) &&
                          isTimestamp(request.resource.data.createdAt) && request.resource.data.createdAt == request.time
                        )
                      );
      allow update: if request.auth != null &&
                      (
                        // Driver updating their own shift
                        (request.auth.uid == resource.data.driverId &&
                         request.auth.uid == request.resource.data.driverId && 
                         request.resource.data.taxiId == resource.data.taxiId && 
                         isTimestamp(request.resource.data.startTime) &&
                         isTimestamp(request.resource.data.endTime) &&
                         request.resource.data.taxiLicensePlate == resource.data.taxiLicensePlate &&
                         request.resource.data.driverFirstName == resource.data.driverFirstName &&
                         request.resource.data.driverLastName == resource.data.driverLastName &&
                         request.resource.data.createdAt == resource.data.createdAt
                        ) ||
                        // Admin updating any shift
                        (isAdmin(request.auth.uid) &&
                         request.resource.data.driverId is string &&
                         request.resource.data.taxiId is string &&
                         isTimestamp(request.resource.data.startTime) &&
                         isTimestamp(request.resource.data.endTime) &&
                         request.resource.data.createdAt == resource.data.createdAt
                        )
                      );
      allow delete: if request.auth != null &&
                      (
                        request.auth.uid == resource.data.driverId || 
                        isAdmin(request.auth.uid)                   
                      );
    }
  }
}
