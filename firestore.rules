rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isTimestamp(value) {
      return value is timestamp;
    }

    // Original isAdmin function (kept for other rules)
    function isAdmin(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc.exists && userDoc.data.role == 'admin';
    }

    // Users Collection
    match /users/{userId} {
      allow read: if request.auth != null &&
                    (
                      (request.auth.uid == userId) || // User can read their own profile
                      isAdmin(request.auth.uid)      // Admin can read any profile
                    );
      // Inlined admin check for listing users
      allow list: if request.auth != null &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      allow create: if request.auth != null &&
                    (
                      // Admin creating a driver profile
                      (isAdmin(request.auth.uid) &&
                       request.resource.data.role == 'driver' && // Admin must set role to driver
                       request.resource.data.uid == userId && // Ensures document ID matches UID field
                       request.resource.data.email is string && request.resource.data.email.size() > 0 &&
                       request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                       request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                       request.resource.data.employeeType is string && request.resource.data.employeeType.size() > 0
                       // Note: createdAt is handled by serverTimestamp() on client, no explicit check here needed for create
                      )
                    );

      allow update: if request.auth != null &&
                      (
                        // User updating their own profile (cannot change role, email, uid, createdAt)
                        (request.auth.uid == userId &&
                         request.resource.data.role == resource.data.role &&
                         request.resource.data.email == resource.data.email &&
                         request.resource.data.uid == resource.data.uid &&
                         request.resource.data.createdAt == resource.data.createdAt // createdAt is immutable
                        ) ||
                        // Admin updating any driver profile (cannot change email, uid, createdAt; role must remain driver)
                        (isAdmin(request.auth.uid) &&
                         request.resource.data.uid == resource.data.uid &&
                         request.resource.data.email == resource.data.email &&
                         request.resource.data.createdAt == resource.data.createdAt && // createdAt is immutable
                         (resource.data.role == 'driver' && request.resource.data.role == 'driver')
                        )
                      );
      allow delete: if isAdmin(request.auth.uid);
    }

    // Taxis Collection
    match /taxis/{taxiId} {
      // Any authenticated user can attempt to list taxis.
      // Read rule below ensures they only get active ones if not admin.
      allow list: if request.auth != null;
      allow read: if request.auth != null &&
                    ( isAdmin(request.auth.uid) || resource.data.isActive == true );
      // Admin-only for write operations
      allow create, update, delete: if isAdmin(request.auth.uid);
    }

    // Shifts Collection
    match /shifts/{shiftId} {
      allow read: if request.auth != null &&
                    (
                      (resource.data.driverId == request.auth.uid) || // Driver can read their own shifts
                      isAdmin(request.auth.uid)                               // Admin can read any shift
                    );
      // Inlined admin check for listing shifts
      allow list: if request.auth != null &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      allow create: if request.auth != null &&
                      (
                        // Driver creating their own shift
                        (resource.data.driverId == request.auth.uid &&
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'driver'
                         // Further checks for valid shift data (taxiId, times, etc.) should be here
                         // Ensure taxiId exists and is active, driverId matches auth, times are valid
                        ) ||
                        // Admin creating any shift
                        (isAdmin(request.auth.uid)
                         // Further checks for valid shift data
                        )
                      );

      allow update: if request.auth != null &&
                      (
                        // Driver updating their own shift
                        (resource.data.driverId == request.auth.uid &&
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'driver' &&
                         request.resource.data.driverId == resource.data.driverId && // Cannot change driverId
                         request.resource.data.createdAt == resource.data.createdAt // createdAt immutable
                         // Further checks: cannot edit past shifts, ensure valid data
                        ) ||
                        // Admin updating any shift
                        (isAdmin(request.auth.uid) &&
                         request.resource.data.createdAt == resource.data.createdAt // createdAt immutable
                         // Further checks for valid data
                        )
                      );

      allow delete: if request.auth != null &&
                      (
                        // Driver deleting their own shift
                        (resource.data.driverId == request.auth.uid &&
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'driver'
                         // Further checks: cannot delete past shifts
                        ) ||
                        // Admin deleting any shift
                        isAdmin(request.auth.uid)
                      );
    }
  }
}
