
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin(userId) {
      // Ensure the user document exists before trying to access its data.
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc.exists == true && userDoc.data.role == 'admin';
    }

    // Helper function to check if a value is a Firestore Timestamp
    function isTimestamp(value) {
      return value is timestamp;
    }

    // Helper function to check if a taxi is active
    function isTaxiActive(taxiId) {
      let taxiDoc = get(/databases/$(database)/documents/taxis/$(taxiId));
      return taxiDoc.exists == true && taxiDoc.data.isActive == true;
    }

    match /users/{userId} {
      // A user can read their own profile, OR an admin can read any profile.
      allow read: if request.auth != null &&
                    (request.auth.uid == userId || isAdmin(request.auth.uid));

      allow list: if request.auth != null && isAdmin(request.auth.uid); // Admins can list users (e.g., for driver management table)

      allow create: if request.auth != null &&
                      (
                        // Case 1: User creating their own profile (e.g., initial signup, if you had such a flow)
                        // This rule is very specific and likely not hit by current app logic which uses admin creation.
                        (request.auth.uid == userId &&
                         request.resource.data.uid == userId &&
                         request.resource.data.email == request.auth.token.email &&
                         (request.resource.data.role == 'driver' || request.resource.data.role == 'admin') && // Allows self-creation of admin for first admin
                         isTimestamp(request.resource.data.createdAt) && request.resource.data.createdAt == request.time &&
                         request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                         request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                         (!('employeeType' in request.resource.data) || request.resource.data.employeeType is string)
                        )
                        ||
                        // Case 2: Admin creating a driver profile
                        (isAdmin(request.auth.uid) &&
                         request.resource.data.role == 'driver' && // Admin can only create 'driver' roles via this rule
                         request.resource.data.uid == userId && // uid in doc must match doc id
                         request.resource.data.email is string && request.resource.data.email.size() > 0 &&
                         isTimestamp(request.resource.data.createdAt) && request.resource.data.createdAt == request.time && // Reverted to this stricter check
                         request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                         request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                         request.resource.data.employeeType is string && request.resource.data.employeeType.size() > 0
                        )
                      );

      allow update: if request.auth != null &&
                      (
                        // User updating their own profile (cannot change role or email)
                        (request.auth.uid == userId &&
                         request.resource.data.uid == userId &&
                         request.resource.data.email == resource.data.email && // email cannot be changed
                         request.resource.data.role == resource.data.role &&   // role cannot be changed by user
                         request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                         request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                         (!('employeeType' in request.resource.data) || request.resource.data.employeeType is string)
                        )
                        ||
                        // Admin updating any profile
                        isAdmin(request.auth.uid)
                      );
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    match /taxis/{taxiId} {
      allow read: if request.auth != null &&
                    (
                      isAdmin(request.auth.uid) ||
                      (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'driver' && resource.data.isActive == true)
                    );
      allow list: if request.auth != null &&
                    (
                      isAdmin(request.auth.uid) ||
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'driver' // Drivers can list for booking
                    );
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    match /shifts/{shiftId} {
      allow read: if request.auth != null &&
                    (isAdmin(request.auth.uid) || request.auth.uid == resource.data.driverId);

      allow list: if request.auth != null && isAdmin(request.auth.uid); // Admins can list all shifts. Driver queries are filtered client-side + backed by read.

      allow create: if request.auth != null &&
                      isTaxiActive(request.resource.data.taxiId) && // Taxi must be active
                      (
                        // Driver creating their own shift
                        (request.auth.uid == request.resource.data.driverId &&
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'driver'
                        )
                        ||
                        // Admin creating any shift
                        isAdmin(request.auth.uid)
                      ) &&
                      isTimestamp(request.resource.data.startTime) &&
                      isTimestamp(request.resource.data.endTime) &&
                      request.resource.data.startTime < request.resource.data.endTime &&
                      isTimestamp(request.resource.data.createdAt) && request.resource.data.createdAt == request.time;

      allow update: if request.auth != null &&
                      (
                        // Driver updating their own shift
                        (request.auth.uid == resource.data.driverId &&
                         request.resource.data.driverId == resource.data.driverId &&
                         (request.resource.data.taxiId == resource.data.taxiId || isTaxiActive(request.resource.data.taxiId))
                        )
                        ||
                        isAdmin(request.auth.uid)
                      ) &&
                      isTimestamp(request.resource.data.startTime) &&
                      isTimestamp(request.resource.data.endTime) &&
                      request.resource.data.startTime < request.resource.data.endTime;

      allow delete: if request.auth != null &&
                      (
                        (request.auth.uid == resource.data.driverId) ||
                        isAdmin(request.auth.uid)
                      );
    }
  }
}
