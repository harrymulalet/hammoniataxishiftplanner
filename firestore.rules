rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(checkedUserId) {
      // Check if the user document exists and has the role 'admin'
      return exists(/databases/$(database)/documents/users/$(checkedUserId)) &&
             get(/databases/$(database)/documents/users/$(checkedUserId)).data.role == 'admin';
    }

    // Rules for the 'users' collection (user profiles)
    match /users/{userId} {
      // Rule 1: An authenticated user can read THEIR OWN profile.
      allow read: if request.auth != null && request.auth.uid == userId;

      // Rule 2: An ADMIN can read ANY user profile.
      // This rule is effectively OR'd with the one above by Firestore.
      allow read: if request.auth != null && isAdmin(request.auth.uid);


      // Allow admin to create a 'driver' user profile
      allow create: if request.auth != null && isAdmin(request.auth.uid) &&
                       request.resource.data.uid == userId && // The document ID must match the uid in the data
                       request.resource.data.role == 'driver' && // Admins can only create drivers this way via this rule path
                       request.resource.data.containsKey('email') && request.resource.data.email is string &&
                       request.resource.data.containsKey('firstName') && request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                       request.resource.data.containsKey('lastName') && request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                       request.resource.data.containsKey('employeeType') && request.resource.data.employeeType is string &&
                       request.resource.data.createdAt == request.time;

      // Allow user to update their own profile, or admin to update any.
      // Restrictions on what can be updated (e.g., role change only by admin).
      allow update: if request.auth != null &&
                       (request.auth.uid == userId || isAdmin(request.auth.uid)) &&
                       request.resource.data.uid == userId && // UID cannot be changed
                       request.resource.data.email == resource.data.email && // Email cannot be changed by user/admin once set
                       (isAdmin(request.auth.uid) || request.resource.data.role == resource.data.role) && // Role can only be changed by admin
                       request.resource.data.containsKey('firstName') && request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                       request.resource.data.containsKey('lastName') && request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                       (!request.resource.data.containsKey('employeeType') || request.resource.data.employeeType is string) &&
                       request.resource.data.createdAt == resource.data.createdAt; // createdAt cannot be changed

      allow delete: if request.auth != null && isAdmin(request.auth.uid); // Only admins can delete user profiles
    }

    // Rules for 'taxis' collection
    match /taxis/{taxiId} {
      // Authenticated users (drivers or admins) can read active taxis. Admins can read all.
      allow read: if request.auth != null && (resource.data.isActive == true || isAdmin(request.auth.uid));
      // Only admins can write to taxis collection
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Rules for 'shifts' collection
    match /shifts/{shiftId} {
      // Driver can read their own shifts, Admin can read all shifts.
      allow read: if request.auth != null &&
                     (request.auth.uid == resource.data.driverId || isAdmin(request.auth.uid));

      // Driver creating their own shift
      allow create: if request.auth != null &&
                       request.resource.data.driverId == request.auth.uid &&
                       exists(/databases/$(database)/documents/taxis/$(request.resource.data.taxiId)) &&
                       get(/databases/$(database)/documents/taxis/$(request.resource.data.taxiId)).data.isActive == true &&
                       request.resource.data.startTime < request.resource.data.endTime &&
                       request.resource.data.createdAt == request.time;

      // Admin creating any shift
      allow create: if request.auth != null && isAdmin(request.auth.uid) &&
                       exists(/databases/$(database)/documents/users/$(request.resource.data.driverId)) &&
                       get(/databases/$(database)/documents/users/$(request.resource.data.driverId)).data.role == 'driver' &&
                       exists(/databases/$(database)/documents/taxis/$(request.resource.data.taxiId)) &&
                       get(/databases/$(database)/documents/taxis/$(request.resource.data.taxiId)).data.isActive == true &&
                       request.resource.data.startTime < request.resource.data.endTime &&
                       (!request.resource.data.containsKey('createdAt') || request.resource.data.createdAt == request.time);


      allow update: if request.auth != null &&
                       ( (request.auth.uid == resource.data.driverId && request.resource.data.driverId == resource.data.driverId) || // Driver can update their own shift, cannot change driverId
                         isAdmin(request.auth.uid) ) && // Admin can update any shift
                       exists(/databases/$(database)/documents/taxis/$(request.resource.data.taxiId)) &&
                       // Taxi being assigned to doesn't strictly need to be active for an update, but good for consistency.
                       // get(/databases/$(database)/documents/taxis/$(request.resource.data.taxiId)).data.isActive == true &&
                       request.resource.data.startTime < request.resource.data.endTime &&
                       request.resource.data.createdAt == resource.data.createdAt; // Original createdAt cannot be changed

      allow delete: if request.auth != null &&
                       (request.auth.uid == resource.data.driverId || isAdmin(request.auth.uid));
    }
  }
}
