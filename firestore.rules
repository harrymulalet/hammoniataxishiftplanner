
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // User Profiles
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isAdmin(request.auth.uid);
      allow create: if (
                      // Admin creating a driver profile
                      (isAdmin(request.auth.uid) && request.resource.data.role == 'driver') ||
                      // User creating their own profile (e.g. during initial signup if that flow existed)
                      (request.auth.uid == userId && request.resource.data.email == request.auth.token.email)
                    ) &&
                    request.resource.data.uid == userId &&
                    request.resource.data.createdAt == request.time &&
                    request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                    request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                    (request.resource.data.role == 'admin' || request.resource.data.role == 'driver') &&
                    (request.resource.data.role == 'driver' ? request.resource.data.employeeType is string && request.resource.data.employeeType.size() > 0 : true);

      allow update: if (request.auth.uid == userId &&
                       request.resource.data.uid == userId &&
                       request.resource.data.email == resource.data.email && // Prevent email change by self
                       request.resource.data.role == resource.data.role &&   // Prevent role change by self
                       request.resource.data.createdAt == resource.data.createdAt && // Prevent changing createdAt
                       request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                       request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                       (request.resource.data.role == 'driver' ? request.resource.data.employeeType is string && request.resource.data.employeeType.size() > 0 : true)
                      ) || isAdmin(request.auth.uid); // Admins can update anything
      allow delete: if isAdmin(request.auth.uid);
    }

    // Taxis
    match /taxis/{taxiId} {
      allow read: if (request.auth != null && resource.data.isActive == true) || isAdmin(request.auth.uid);
      allow create: if isAdmin(request.auth.uid) &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.id == taxiId && // Ensure document ID matches 'id' field
                       request.resource.data.licensePlate is string && request.resource.data.licensePlate.size() >= 3 &&
                       request.resource.data.isActive is bool;
      allow update: if isAdmin(request.auth.uid) &&
                       request.resource.data.createdBy == resource.data.createdBy && // Prevent changing createdBy
                       request.resource.data.createdAt == resource.data.createdAt && // Prevent changing createdAt
                       // If ID is changing, it's a "rename" transaction, handled by specific logic.
                       // For simple updates, ID field should match doc ID.
                       (request.resource.data.id == taxiId || request.resource.data.id == request.resource.id) &&
                       request.resource.data.licensePlate is string && request.resource.data.licensePlate.size() >= 3 &&
                       request.resource.data.isActive is bool;
      allow delete: if isAdmin(request.auth.uid);
    }

    // Shifts
    match /shifts/{shiftId} {
      allow read: if (request.auth.uid == resource.data.driverId) || isAdmin(request.auth.uid);

      allow create: if (
                      // Driver booking their own shift
                      (request.auth.uid == request.resource.data.driverId &&
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'driver' &&
                        get(/databases/$(database)/documents/taxis/$(request.resource.data.taxiId)).data.isActive == true
                      ) ||
                      // Admin booking/creating a shift
                      (isAdmin(request.auth.uid) &&
                        get(/databases/$(database)/documents/taxis/$(request.resource.data.taxiId)).data.isActive == true &&
                        exists(/databases/$(database)/documents/users/$(request.resource.data.driverId)) // Ensure driver exists
                      )
                    ) &&
                    request.resource.data.createdAt == request.time &&
                    request.resource.data.startTime is timestamp &&
                    request.resource.data.endTime is timestamp &&
                    request.resource.data.endTime > request.resource.data.startTime &&
                    // Max 10 hours shift (10 * 60 * 60 * 1000 milliseconds)
                    request.resource.data.endTime.toMillis() - request.resource.data.startTime.toMillis() <= 36000000 &&
                    request.resource.data.driverFirstName == get(/databases/$(database)/documents/users/$(request.resource.data.driverId)).data.firstName &&
                    request.resource.data.driverLastName == get(/databases/$(database)/documents/users/$(request.resource.data.driverId)).data.lastName &&
                    request.resource.data.taxiLicensePlate == get(/databases/$(database)/documents/taxis/$(request.resource.data.taxiId)).data.licensePlate;

      allow update: if ( // Driver can update their own shift (limited fields potentially)
                       request.auth.uid == resource.data.driverId &&
                       request.resource.data.driverId == resource.data.driverId && // DriverId cannot change
                       request.resource.data.createdAt == resource.data.createdAt && // CreatedAt cannot change
                       // Denormalized fields must match source if driver/taxi changes (should be handled by admin for such changes)
                       (request.resource.data.taxiId == resource.data.taxiId ?
                          request.resource.data.taxiLicensePlate == get(/databases/$(database)/documents/taxis/$(request.resource.data.taxiId)).data.licensePlate : true) &&
                       (request.resource.data.driverId == resource.data.driverId ?
                          (request.resource.data.driverFirstName == get(/databases/$(database)/documents/users/$(request.resource.data.driverId)).data.firstName &&
                           request.resource.data.driverLastName == get(/databases/$(database)/documents/users/$(request.resource.data.driverId)).data.lastName) : true)
                      ) ||
                      isAdmin(request.auth.uid); // Admin can update any field

      allow delete: if request.auth.uid == resource.data.driverId || isAdmin(request.auth.uid);
    }
  }
}
