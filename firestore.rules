
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isTimestamp(value) {
      return value is timestamp;
    }

    function isDriver(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc.exists && userDoc.data.role == 'driver';
    }

    // Users Collection Rules
    match /users/{userId} {
      allow read: if request.auth != null &&
                    (
                      // User can read their own profile
                      (request.auth.uid == userId) ||
                      // Admin can read any profile
                      (
                        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                      )
                    );

      allow list: if request.auth != null &&
                    exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      allow create: if request.auth != null &&
                      (
                        // Case 1: New user creating their own profile during signup (if applicable, usually handled by admin)
                        // This path is less common if admin creates all users.
                        (request.auth.uid == userId &&
                         request.resource.data.uid == userId &&
                         request.resource.data.role == 'driver' && // Or other default role
                         request.resource.data.email == request.auth.token.email &&
                         isTimestamp(request.resource.data.createdAt) && request.resource.data.createdAt == request.time) ||

                        // Case 2: Admin creating a driver profile
                        (
                          (
                            exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                          ) &&
                          request.resource.data.role == 'driver' &&
                          request.resource.data.uid == userId && // Ensures the document ID matches the uid field
                          request.resource.data.email is string && request.resource.data.email.size() > 0 &&
                          // serverTimestamp() means createdAt is not a timestamp at rule evaluation time for create
                          request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                          request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                          request.resource.data.employeeType is string && request.resource.data.employeeType.size() > 0
                          // createdAt will be serverTimestamp, so no direct time check needed here for admin path
                        )
                      );

      allow update: if request.auth != null &&
                      (
                        // Case 1: User updating their own profile
                        (request.auth.uid == userId &&
                         # User cannot change their own role, uid, or email (email can be changed via Firebase Auth SDK)
                         request.resource.data.role == resource.data.role &&
                         request.resource.data.uid == resource.data.uid &&
                         request.resource.data.email == resource.data.email &&
                         # Ensure createdAt is not changed if it exists and was a timestamp
                         (
                           (!resource.data.containsKey('createdAt') || resource.data.createdAt == null) ||
                           (resource.data.createdAt is timestamp && request.resource.data.createdAt == resource.data.createdAt)
                         )
                        ) ||
                        // Case 2: Admin updating any user's profile
                        (
                          (
                            exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                          ) &&
                          request.resource.data.uid == userId && // UID in doc must match doc ID
                          // Admin can change role, name, employeeType. Email shouldn't be changed here.
                          request.resource.data.email == resource.data.email && // Prevent admin from changing email via Firestore directly
                          // createdAt handling by admin on update:
                          // 1. If prior createdAt doesn't exist or was null, new value from serverTimestamp is fine (won't be 'is timestamp' yet)
                          // 2. If prior createdAt exists and is a timestamp, it must not change.
                          (
                            (!resource.data.containsKey('createdAt') || resource.data.createdAt == null) ||
                            (resource.data.createdAt is timestamp && request.resource.data.createdAt == resource.data.createdAt)
                          )
                        )
                      );

      allow delete: if request.auth != null &&
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Taxis Collection Rules
    match /taxis/{taxiId} {
      allow read: if request.auth != null &&
                    (
                      // Admin can read any taxi
                      (
                        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                      ) ||
                      // Authenticated non-admins can only read active taxis
                      resource.data.isActive == true
                    );

      allow list: if request.auth != null; // Any authenticated user can list (client filters for active)

      allow create, update, delete: if request.auth != null &&
                                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Shifts Collection Rules
    match /shifts/{shiftId} {
      allow read: if request.auth != null &&
                    (
                      // Driver can read their own shift
                      (request.auth.uid == resource.data.driverId && isDriver(request.auth.uid)) ||
                      // Admin can read any shift
                      (
                        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                      )
                    );

      allow list: if request.auth != null &&
                    (
                      // Driver can list (client query should filter by their driverId)
                      isDriver(request.auth.uid) ||
                      // Admin can list all shifts
                      (
                        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                      )
                    );

      allow create: if request.auth != null &&
                      (
                        // Driver creating their own shift
                        (request.auth.uid == request.resource.data.driverId &&
                         isDriver(request.auth.uid) &&
                         request.resource.data.driverFirstName is string && // Ensure denormalized fields are present
                         request.resource.data.driverLastName is string &&
                         request.resource.data.taxiLicensePlate is string
                        ) ||
                        // Admin creating a shift for any driver
                        (
                          (
                            exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                          ) &&
                          request.resource.data.driverFirstName is string &&
                          request.resource.data.driverLastName is string &&
                          request.resource.data.taxiLicensePlate is string
                        )
                      );

      allow update: if request.auth != null &&
                      (
                        // Driver can update their own shift
                        (request.auth.uid == resource.data.driverId && // Can only update own shifts
                         request.auth.uid == request.resource.data.driverId && // Cannot change driverId
                         isDriver(request.auth.uid) &&
                         request.resource.data.driverFirstName is string &&
                         request.resource.data.driverLastName is string &&
                         request.resource.data.taxiLicensePlate is string
                        ) ||
                        // Admin can update any shift
                        (
                          (
                            exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                          ) &&
                          request.resource.data.driverFirstName is string &&
                          request.resource.data.driverLastName is string &&
                          request.resource.data.taxiLicensePlate is string
                        )
                      );

      allow delete: if request.auth != null &&
                      (
                        // Driver can delete their own shift
                        (request.auth.uid == resource.data.driverId && isDriver(request.auth.uid)) ||
                        // Admin can delete any shift
                        (
                          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                        )
                      );
    }
  }
}

    