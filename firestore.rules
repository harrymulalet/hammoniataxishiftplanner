
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Helper function to check if a taxi is active
    function isTaxiActive(taxiId) {
      return get(/databases/$(database)/documents/taxis/$(taxiId)).data.isActive == true;
    }

    // User profiles
    match /users/{userId} {
      allow read: if request.auth != null && (
                    request.auth.uid == userId || isAdmin(request.auth.uid)
                  );
      allow create: if request.auth != null && (
                      // Case 1: User creates their own profile (e.g. during a self-signup flow - not used in this app but good practice)
                      (request.auth.uid == userId && request.resource.data.email == request.auth.token.email) ||
                      // Case 2: An admin creates a driver profile
                      (isAdmin(request.auth.uid) && request.resource.data.role == 'driver')
                    ) &&
                    request.resource.data.uid == userId &&
                    request.resource.data.createdAt == request.time &&
                    request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                    request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                    (request.resource.data.role == 'driver' || request.resource.data.role == 'admin') &&
                    (request.resource.data.role == 'driver' ? 
                      (request.resource.data.employeeType is string && request.resource.data.employeeType.size() > 0) : true);

      allow update: if request.auth != null && (
                      // User updates their own profile (cannot change role or email directly via this)
                      (request.auth.uid == userId && !(request.resource.data.email != resource.data.email) && !(request.resource.data.role != resource.data.role) ) ||
                      // Admin updates any profile
                      isAdmin(request.auth.uid)
                    ) &&
                    request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                    request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                    (request.resource.data.role == 'driver' ? 
                      (request.resource.data.employeeType is string && request.resource.data.employeeType.size() > 0) : true);

      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Taxis
    match /taxis/{taxiId} {
      allow read: if request.auth != null && 
                     (isAdmin(request.auth.uid) || (isTaxiActive(taxiId) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'driver'));
      allow list: if request.auth != null && (isAdmin(request.auth.uid) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'driver'); // Drivers can list for booking
      allow create: if request.auth != null && isAdmin(request.auth.uid) &&
                      request.resource.data.licensePlate is string && request.resource.data.licensePlate.size() > 0 &&
                      request.resource.data.id == taxiId && // Ensure doc ID matches normalized plate in 'id' field
                      request.resource.data.createdBy == request.auth.uid &&
                      request.resource.data.createdAt == request.time;
      allow update: if request.auth != null && isAdmin(request.auth.uid);
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Shifts
    match /shifts/{shiftId} {
      allow read: if request.auth != null && (
                    (resource.data.driverId == request.auth.uid) || // Driver can read their own shifts
                    isAdmin(request.auth.uid) // Admin can read all shifts
                  );
      allow list: if request.auth != null && (
        // Check role directly from user's profile document
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'driver' && request.query.driverId == request.auth.uid) || // Drivers can list their own shifts.
        isAdmin(request.auth.uid) // Admins can list all shifts.
      );
      allow create: if request.auth != null &&
                      request.resource.data.taxiId is string &&
                      isTaxiActive(request.resource.data.taxiId) &&
                      request.resource.data.startTime is timestamp &&
                      request.resource.data.endTime is timestamp &&
      								request.resource.data.endTime > request.resource.data.startTime &&
                      (
                        // Case 1: Driver creates a shift for themselves
                        (
                          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'driver' &&
                          request.resource.data.driverId == request.auth.uid
                          // Names are denormalized, client should provide them. Rule doesn't need to validate exact match here if driverId matches.
                        ) ||
                        // Case 2: Admin creates a shift
                        isAdmin(request.auth.uid)
                      ) &&
                      request.resource.data.createdAt == request.time;

      allow update: if request.auth != null &&
                      (
                        (resource.data.driverId == request.auth.uid) || // Driver can update their own shifts
                        isAdmin(request.auth.uid) // Admin can update any shift
                      );
      allow delete: if request.auth != null &&
                      (
                        (resource.data.driverId == request.auth.uid) || // Driver can delete their own shifts
                        isAdmin(request.auth.uid) // Admin can delete any shift
                      );
    }
  }
}

    