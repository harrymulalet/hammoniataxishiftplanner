
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isTimestamp(value) {
      return value is timestamp;
    }

    // Function to check if the requesting user is an admin based on their Firestore document
    function isAdmin() {
      // Ensure request.auth is not null before trying to access request.auth.uid
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Function to check if the requesting user is a driver based on their Firestore document
    function isDriver() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'driver';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Read:
      // 1. Authenticated user can read their own profile.
      // 2. Admin can read any user profile.
      allow read: if request.auth != null &&
                    (
                      (request.auth.uid == userId) || 
                      isAdmin()
                    );

      // List (Query):
      // 1. Admin (checked by email for diagnostics) can list users.
      allow list: if request.auth != null && request.auth.token.email == 'hammoniataxi6@gmail.com';
                  // Reverted from: if isAdmin();
                  // Reverted from: if request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      // Create:
      // 1. Any user creating their own profile during signup (not used in this app directly, admins create drivers).
      // 2. Admin creating a driver profile.
      allow create: if request.auth != null &&
                      // Case 1: User creating their own profile (ensure UID matches, role is driver, and basic fields present)
                      // This path is not typically hit if admins create users.
                      (
                        request.auth.uid == userId &&
                        request.resource.data.role == 'driver' &&
                        request.resource.data.uid == userId &&
                        request.resource.data.email is string && request.resource.data.email.size() > 0 &&
                        isTimestamp(request.resource.data.createdAt) && // New users should have createdAt as a timestamp
                        request.resource.data.createdAt == request.time && // createdAt must be server time
                        request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                        request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                        request.resource.data.employeeType is string && request.resource.data.employeeType.size() > 0
                      ) ||
                      // Case 2: Admin creating a driver profile
                      (
                        isAdmin() &&
                        request.resource.data.role == 'driver' &&
                        request.resource.data.uid == userId && // The document ID must match the uid field in the data
                        request.resource.data.email is string && request.resource.data.email.size() > 0 &&
                        // For serverTimestamp(), request.resource.data.createdAt is not a timestamp during rule evaluation.
                        // No direct isTimestamp check here for admin creation using serverTimestamp().
                        request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                        request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                        request.resource.data.employeeType is string && request.resource.data.employeeType.size() > 0
                      );

      // Update:
      // 1. User can update their own profile (cannot change role, email, uid, createdAt).
      // 2. Admin can update any user profile (cannot change email, uid; specific createdAt logic).
      allow update: if request.auth != null &&
                      (
                        // Case 1: User updating their own profile
                        (
                          request.auth.uid == userId &&
                          request.resource.data.uid == request.resource.prior.data.uid && // UID cannot change
                          request.resource.data.email == request.resource.prior.data.email && // Email cannot change
                          request.resource.data.role == request.resource.prior.data.role && // Role cannot be changed by user
                          isTimestamp(request.resource.data.createdAt) && // Ensure createdAt remains a timestamp
                          request.resource.data.createdAt == request.resource.prior.data.createdAt && // createdAt cannot change
                          request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                          request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                          request.resource.data.employeeType is string && request.resource.data.employeeType.size() > 0
                        ) ||
                        // Case 2: Admin updating a user profile
                        (
                          isAdmin() &&
                          request.resource.data.uid == request.resource.prior.data.uid &&     // UID cannot change
                          request.resource.data.email == request.resource.prior.data.email && // Email cannot change
                          // Admin can change role, firstName, lastName, employeeType
                          request.resource.data.firstName is string && request.resource.data.firstName.size() > 0 &&
                          request.resource.data.lastName is string && request.resource.data.lastName.size() > 0 &&
                          request.resource.data.employeeType is string && request.resource.data.employeeType.size() > 0 &&
                          ( // createdAt handling for admin:
                            // 1. If prior createdAt doesn't exist or is null or not a timestamp, new value can be anything (serverTimestamp() is fine)
                            (!request.resource.prior.data.containsKey('createdAt') || request.resource.prior.data.createdAt == null || !(request.resource.prior.data.createdAt is timestamp)) ||
                            // 2. If prior createdAt exists and is a timestamp, it must not change
                            (request.resource.prior.data.createdAt is timestamp && request.resource.data.createdAt == request.resource.prior.data.createdAt)
                          )
                        )
                      );

      // Delete: Admin can delete any user profile (except their own, for safety - can be adjusted).
      // Note: Deleting a user profile here does not delete their Firebase Auth account.
      allow delete: if isAdmin() && request.auth.uid != userId;
    }

    // Rules for the 'taxis' collection
    match /taxis/{taxiId} {
      // Read:
      // 1. Admin can read any taxi.
      // 2. Any authenticated user can read active taxis.
      allow read: if request.auth != null &&
                    (
                      isAdmin() ||
                      resource.data.isActive == true
                    );
      
      // List (Query):
      // 1. Any authenticated user can list taxis (client query filters for active).
      //    Read rule above ensures they can only access active ones if not admin.
      allow list: if request.auth != null;

      // Create, Update, Delete: Only admins.
      // License plate (which forms part of ID) can be tricky to "change" - might involve delete & recreate with new ID logic client-side or transactional update.
      // For simplicity, allow general update by admin for now.
      allow create: if isAdmin() &&
                      request.resource.data.id == taxiId && // Ensure document ID matches 'id' field
                      request.resource.data.licensePlate is string && request.resource.data.licensePlate.size() > 0 &&
                      request.resource.data.isActive is bool &&
                      request.resource.data.createdBy == request.auth.uid; // Track who created it

      allow update: if isAdmin() &&
                      request.resource.data.id == taxiId && // ID field itself shouldn't change if doc ID is license plate
                      request.resource.data.licensePlate is string && request.resource.data.licensePlate.size() > 0 &&
                      request.resource.data.isActive is bool &&
                      request.resource.data.createdBy == request.resource.prior.data.createdBy; // Original creator shouldn't change

      allow delete: if isAdmin();
    }

    // Rules for the 'shifts' collection
    match /shifts/{shiftId} {
      // Read:
      // 1. Admin can read any shift.
      // 2. Driver can read their own shifts.
      allow read: if request.auth != null &&
                    (
                      isAdmin() ||
                      (isDriver() && resource.data.driverId == request.auth.uid)
                    );

      // List (Query):
      // 1. Admin (by email for diagnostics) can list all shifts.
      // 2. Driver can list shifts (client query should filter for their driverId).
      allow list: if request.auth != null &&
                    (
                      (
                        isDriver() 
                        // Client query must filter by driverId: where("driverId", "==", request.auth.uid)
                        // This rule just allows a driver to make list queries.
                        // The `read` rule above will ultimately enforce they only see their own.
                      ) || 
                      request.auth.token.email == 'hammoniataxi6@gmail.com' // Admin email check
                    );
      
      // Create:
      // 1. Admin can create any shift.
      // 2. Driver can create their own shift.
      // Common data validation for shifts:
      function isValidShiftData(shiftData, isNewShift) {
        return shiftData.taxiId is string && shiftData.taxiId.size() > 0 &&
               shiftData.taxiLicensePlate is string && shiftData.taxiLicensePlate.size() > 0 &&
               shiftData.driverId is string && shiftData.driverId.size() > 0 &&
               shiftData.driverFirstName is string && shiftData.driverFirstName.size() > 0 &&
               shiftData.driverLastName is string && shiftData.driverLastName.size() > 0 &&
               isTimestamp(shiftData.startTime) &&
               isTimestamp(shiftData.endTime) &&
               shiftData.endTime > shiftData.startTime &&
               (isNewShift ? (isTimestamp(shiftData.createdAt) && shiftData.createdAt == request.time) : true); // createdAt only checked for new shifts
      }

      allow create: if request.auth != null &&
                      isValidShiftData(request.resource.data, true) &&
                      (
                        // Admin creating a shift
                        isAdmin() ||
                        // Driver creating their own shift
                        (isDriver() && request.resource.data.driverId == request.auth.uid)
                      );

      // Update:
      // 1. Admin can update any shift.
      // 2. Driver can update their own shift (cannot change driverId, taxiId, createdAt).
      allow update: if request.auth != null &&
                      isValidShiftData(request.resource.data, false) && // Don't re-check createdAt against request.time
                      request.resource.data.createdAt == request.resource.prior.data.createdAt && // createdAt immutable
                      (
                        // Admin updating a shift
                        isAdmin() ||
                        // Driver updating their own shift
                        (
                          isDriver() &&
                          request.resource.data.driverId == request.auth.uid &&
                          request.resource.prior.data.driverId == request.auth.uid && // Original driver must be current user
                          request.resource.data.taxiId == request.resource.prior.data.taxiId // Taxi cannot be changed by driver
                        )
                      );
      
      // Delete:
      // 1. Admin can delete any shift.
      // 2. Driver can delete their own shift.
      allow delete: if request.auth != null &&
                      (
                        isAdmin() ||
                        (isDriver() && get(/databases/$(database)/documents/shifts/$(shiftId)).data.driverId == request.auth.uid)
                      );
    }
  }
}

    